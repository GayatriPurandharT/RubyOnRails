********* QUERY **********
DROP TABLE IF EXISTS my_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS stock_price;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS newly_acquired_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP FUNCTION IF EXISTS valuing_stock();
**************************

DROP FUNCTION
********* QUERY **********
DROP FUNCTION IF EXISTS portfolio_value();
**************************

DROP FUNCTION
********* QUERY **********
create table my_stocks (
  symbol        varchar(20) not null,
  n_shares      integer not null,
  date_acquired date not null
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN ;
**************************

COPY 5
********* QUERY **********
create table stock_price as
  select symbol,current_date as quote_date,
         31.415 as price from my_stocks ;
**************************

SELECT 5
********* QUERY **********
insert into newly_acquired_stocks
       select * from my_stocks
       where date_acquired > '2017-05-15'::date;
**************************

********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks cross join stock_price
 where my_stocks.symbol = stock_price.symbol ;
**************************

 symbol | number_of_shares | price_per_share | current_value 
--------+------------------+-----------------+---------------
 MSFT   |              500 |          31.415 |     15707.500
 INTU   |              480 |          31.415 |     15079.200
 CRM    |              450 |          31.415 |     14136.750
 SHOP   |              100 |          31.415 |      3141.500
 NFLX   |               98 |          31.415 |      3078.670
(5 rows)

********* QUERY **********
insert into my_stocks (symbol,n_shares,date_acquired)
        values('FLIPKART','390','2017-10-15');
**************************

INSERT 0 1
********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks full outer join stock_price
 on my_stocks.symbol = stock_price.symbol ;
**************************

  symbol  | number_of_shares | price_per_share | current_value 
----------+------------------+-----------------+---------------
 MSFT     |              500 |          31.415 |     15707.500
 INTU     |              480 |          31.415 |     15079.200
 CRM      |              450 |          31.415 |     14136.750
 SHOP     |              100 |          31.415 |      3141.500
 NFLX     |               98 |          31.415 |      3078.670
 FLIPKART |              390 |                 |              
(6 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION valuing_stock(varchar(20)) RETURNS integer AS $$
DECLARE
  symbol ALIAS FOR $1;
  price integer := 0;
BEGIN
  FOR i IN 1 .. LENGTH(symbol) LOOP
    price = price + ASCII(SUBSTRING (symbol, i, 1));
  END LOOP;
  RETURN price;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_price
SET    price = updated_stock.new_price
FROM   (select symbol, valuing_stock(symbol) as new_price from my_stocks) as updated_stock
WHERE  updated_stock.symbol = stock_price.symbol;
**************************

UPDATE 5
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_per_share, price
from my_stocks CROSS JOIN stock_price
where my_stocks.symbol = stock_price.symbol;
**************************

 symbol | n_shares | price_per_share | price 
--------+----------+-----------------+-------
 MSFT   |      500 |             314 |   314
 INTU   |      480 |             320 |   320
 CRM    |      450 |             226 |   226
 SHOP   |      100 |             378 |   378
 NFLX   |       98 |             312 |   312
(5 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value() RETURNS bigint AS $$
DECLARE
  stocks_cursor CURSOR FOR select *
       from my_stocks CROSS JOIN stock_price
       where my_stocks.symbol = stock_price.symbol;
  row  RECORD;
  aggregate_value bigint := 0;
BEGIN
  OPEN stocks_cursor;
  LOOP
    FETCH FROM stocks_cursor INTO row;
    EXIT WHEN NOT FOUND;
    aggregate_value = aggregate_value + (row.n_shares * row.price);
  END LOOP;
  return aggregate_value;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
select portfolio_value();
**************************

 portfolio_value 
-----------------
          480676
(1 row)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired)
  select my_stocks.symbol, n_shares, NOW() from my_stocks FULL OUTER JOIN stock_price
  ON my_stocks.symbol = stock_price.symbol
  where price > (select avg(price) from stock_price);
**************************

INSERT 0 4
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_of_each_share, price*n_shares as current_value, date_acquired, quote_date
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol;
**************************

  symbol  | n_shares | price_of_each_share | current_value | date_acquired | quote_date 
----------+----------+---------------------+---------------+---------------+------------
 MSFT     |      500 |                 314 |        157000 | 2016-12-21    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2017-04-06    | 2018-09-14
 CRM      |      450 |                 226 |        101700 | 2017-07-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2016-02-26    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2017-09-13    | 2018-09-14
 FLIPKART |      390 |                     |               | 2017-10-15    | 
 MSFT     |      500 |                 314 |        157000 | 2018-09-14    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2018-09-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2018-09-14    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2018-09-14    | 2018-09-14
(10 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price;
**************************

  symbol  | total_n_shares | total_value_held 
----------+----------------+------------------
 NFLX     |            196 |            61152
 INTU     |            960 |           307200
 CRM      |            450 |           101700
 FLIPKART |            390 |                 
 MSFT     |           1000 |           314000
 SHOP     |            200 |            75600
(6 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price
having count(date_acquired) > 1;
**************************

 symbol | total_n_shares | total_value_held 
--------+----------------+------------------
 NFLX   |            196 |            61152
 INTU   |            960 |           307200
 MSFT   |           1000 |           314000
 SHOP   |            200 |            75600
(4 rows)

********* QUERY **********
DROP TABLE IF EXISTS my_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS stock_price;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS newly_acquired_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP FUNCTION IF EXISTS valuing_stock();
**************************

DROP FUNCTION
********* QUERY **********
DROP FUNCTION IF EXISTS portfolio_value();
**************************

DROP FUNCTION
********* QUERY **********
create table my_stocks (
  symbol        varchar(20) not null,
  n_shares      integer not null,
  date_acquired date not null
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN ;
**************************

COPY 5
********* QUERY **********
create table stock_price as
  select symbol,current_date as quote_date,
         31.415 as price from my_stocks ;
**************************

SELECT 5
********* QUERY **********
insert into newly_acquired_stocks
       select * from my_stocks
       where date_acquired > '2017-05-15'::date;
**************************

********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks cross join stock_price
 where my_stocks.symbol = stock_price.symbol ;
**************************

 symbol | number_of_shares | price_per_share | current_value 
--------+------------------+-----------------+---------------
 MSFT   |              500 |          31.415 |     15707.500
 INTU   |              480 |          31.415 |     15079.200
 CRM    |              450 |          31.415 |     14136.750
 SHOP   |              100 |          31.415 |      3141.500
 NFLX   |               98 |          31.415 |      3078.670
(5 rows)

********* QUERY **********
insert into my_stocks (symbol,n_shares,date_acquired)
        values('FLIPKART','390','2017-10-15');
**************************

INSERT 0 1
********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks full outer join stock_price
 on my_stocks.symbol = stock_price.symbol ;
**************************

  symbol  | number_of_shares | price_per_share | current_value 
----------+------------------+-----------------+---------------
 MSFT     |              500 |          31.415 |     15707.500
 INTU     |              480 |          31.415 |     15079.200
 CRM      |              450 |          31.415 |     14136.750
 SHOP     |              100 |          31.415 |      3141.500
 NFLX     |               98 |          31.415 |      3078.670
 FLIPKART |              390 |                 |              
(6 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION valuing_stock(varchar(20)) RETURNS integer AS $$
DECLARE
  symbol ALIAS FOR $1;
  price integer := 0;
BEGIN
  FOR i IN 1 .. LENGTH(symbol) LOOP
    price = price + ASCII(SUBSTRING (symbol, i, 1));
  END LOOP;
  RETURN price;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_price
SET    price = updated_stock.new_price
FROM   (select symbol, valuing_stock(symbol) as new_price from my_stocks) as updated_stock
WHERE  updated_stock.symbol = stock_price.symbol;
**************************

UPDATE 5
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_per_share, price
from my_stocks CROSS JOIN stock_price
where my_stocks.symbol = stock_price.symbol;
**************************

 symbol | n_shares | price_per_share | price 
--------+----------+-----------------+-------
 MSFT   |      500 |             314 |   314
 INTU   |      480 |             320 |   320
 CRM    |      450 |             226 |   226
 SHOP   |      100 |             378 |   378
 NFLX   |       98 |             312 |   312
(5 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value() RETURNS bigint AS $$
DECLARE
  stocks_cursor CURSOR FOR select *
       from my_stocks CROSS JOIN stock_price
       where my_stocks.symbol = stock_price.symbol;
  row  RECORD;
  aggregate_value bigint := 0;
BEGIN
  OPEN stocks_cursor;
  LOOP
    FETCH FROM stocks_cursor INTO row;
    EXIT WHEN NOT FOUND;
    aggregate_value = aggregate_value + (row.n_shares * row.price);
  END LOOP;
  return aggregate_value;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
select portfolio_value();
**************************

 portfolio_value 
-----------------
          480676
(1 row)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired)
  select my_stocks.symbol, n_shares, NOW() from my_stocks FULL OUTER JOIN stock_price
  ON my_stocks.symbol = stock_price.symbol
  where price > (select avg(price) from stock_price);
**************************

INSERT 0 4
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_of_each_share, price*n_shares as current_value, date_acquired, quote_date
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol;
**************************

  symbol  | n_shares | price_of_each_share | current_value | date_acquired | quote_date 
----------+----------+---------------------+---------------+---------------+------------
 MSFT     |      500 |                 314 |        157000 | 2016-12-21    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2017-04-06    | 2018-09-14
 CRM      |      450 |                 226 |        101700 | 2017-07-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2016-02-26    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2017-09-13    | 2018-09-14
 FLIPKART |      390 |                     |               | 2017-10-15    | 
 MSFT     |      500 |                 314 |        157000 | 2018-09-14    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2018-09-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2018-09-14    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2018-09-14    | 2018-09-14
(10 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price;
**************************

  symbol  | total_n_shares | total_value_held 
----------+----------------+------------------
 NFLX     |            196 |            61152
 INTU     |            960 |           307200
 CRM      |            450 |           101700
 FLIPKART |            390 |                 
 MSFT     |           1000 |           314000
 SHOP     |            200 |            75600
(6 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price
having count(date_acquired) > 1;
**************************

 symbol | total_n_shares | total_value_held 
--------+----------------+------------------
 NFLX   |            196 |            61152
 INTU   |            960 |           307200
 MSFT   |           1000 |           314000
 SHOP   |            200 |            75600
(4 rows)

********* QUERY **********
DROP TABLE IF EXISTS my_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS stock_price;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS newly_acquired_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP FUNCTION IF EXISTS valuing_stock();
**************************

DROP FUNCTION
********* QUERY **********
DROP FUNCTION IF EXISTS portfolio_value();
**************************

DROP FUNCTION
********* QUERY **********
create table my_stocks (
  symbol        varchar(20) not null,
  n_shares      integer not null,
  date_acquired date not null
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN ;
**************************

COPY 5
********* QUERY **********
create table stock_price as
  select symbol,current_date as quote_date,
         31.415 as price from my_stocks ;
**************************

SELECT 5
********* QUERY **********
insert into newly_acquired_stocks
       select * from my_stocks
       where date_acquired > '2017-05-15'::date;
**************************

********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks cross join stock_price
 where my_stocks.symbol = stock_price.symbol ;
**************************

 symbol | number_of_shares | price_per_share | current_value 
--------+------------------+-----------------+---------------
 MSFT   |              500 |          31.415 |     15707.500
 INTU   |              480 |          31.415 |     15079.200
 CRM    |              450 |          31.415 |     14136.750
 SHOP   |              100 |          31.415 |      3141.500
 NFLX   |               98 |          31.415 |      3078.670
(5 rows)

********* QUERY **********
insert into my_stocks (symbol,n_shares,date_acquired)
        values('FLIPKART','390','2017-10-15');
**************************

INSERT 0 1
********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks full outer join stock_price
 on my_stocks.symbol = stock_price.symbol ;
**************************

  symbol  | number_of_shares | price_per_share | current_value 
----------+------------------+-----------------+---------------
 MSFT     |              500 |          31.415 |     15707.500
 INTU     |              480 |          31.415 |     15079.200
 CRM      |              450 |          31.415 |     14136.750
 SHOP     |              100 |          31.415 |      3141.500
 NFLX     |               98 |          31.415 |      3078.670
 FLIPKART |              390 |                 |              
(6 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION valuing_stock(varchar(20)) RETURNS integer AS $$
DECLARE
  symbol ALIAS FOR $1;
  price integer := 0;
BEGIN
  FOR i IN 1 .. LENGTH(symbol) LOOP
    price = price + ASCII(SUBSTRING (symbol, i, 1));
  END LOOP;
  RETURN price;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_price
SET    price = updated_stock.new_price
FROM   (select symbol, valuing_stock(symbol) as new_price from my_stocks) as updated_stock
WHERE  updated_stock.symbol = stock_price.symbol;
**************************

UPDATE 5
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_per_share, price
from my_stocks CROSS JOIN stock_price
where my_stocks.symbol = stock_price.symbol;
**************************

 symbol | n_shares | price_per_share | price 
--------+----------+-----------------+-------
 MSFT   |      500 |             314 |   314
 INTU   |      480 |             320 |   320
 CRM    |      450 |             226 |   226
 SHOP   |      100 |             378 |   378
 NFLX   |       98 |             312 |   312
(5 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value() RETURNS bigint AS $$
DECLARE
  stocks_cursor CURSOR FOR select *
       from my_stocks CROSS JOIN stock_price
       where my_stocks.symbol = stock_price.symbol;
  row  RECORD;
  aggregate_value bigint := 0;
BEGIN
  OPEN stocks_cursor;
  LOOP
    FETCH FROM stocks_cursor INTO row;
    EXIT WHEN NOT FOUND;
    aggregate_value = aggregate_value + (row.n_shares * row.price);
  END LOOP;
  return aggregate_value;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
select portfolio_value();
**************************

 portfolio_value 
-----------------
          480676
(1 row)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired)
  select my_stocks.symbol, n_shares, NOW() from my_stocks FULL OUTER JOIN stock_price
  ON my_stocks.symbol = stock_price.symbol
  where price > (select avg(price) from stock_price);
**************************

INSERT 0 4
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_of_each_share, price*n_shares as current_value, date_acquired, quote_date
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol;
**************************

  symbol  | n_shares | price_of_each_share | current_value | date_acquired | quote_date 
----------+----------+---------------------+---------------+---------------+------------
 MSFT     |      500 |                 314 |        157000 | 2016-12-21    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2017-04-06    | 2018-09-14
 CRM      |      450 |                 226 |        101700 | 2017-07-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2016-02-26    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2017-09-13    | 2018-09-14
 FLIPKART |      390 |                     |               | 2017-10-15    | 
 MSFT     |      500 |                 314 |        157000 | 2018-09-14    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2018-09-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2018-09-14    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2018-09-14    | 2018-09-14
(10 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price;
**************************

  symbol  | total_n_shares | total_value_held 
----------+----------------+------------------
 NFLX     |            196 |            61152
 INTU     |            960 |           307200
 CRM      |            450 |           101700
 FLIPKART |            390 |                 
 MSFT     |           1000 |           314000
 SHOP     |            200 |            75600
(6 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price
having count(date_acquired) > 1;
**************************

 symbol | total_n_shares | total_value_held 
--------+----------------+------------------
 NFLX   |            196 |            61152
 INTU   |            960 |           307200
 MSFT   |           1000 |           314000
 SHOP   |            200 |            75600
(4 rows)

********* QUERY **********
DROP TABLE IF EXISTS my_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS stock_price;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS newly_acquired_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP FUNCTION IF EXISTS valuing_stock();
**************************

DROP FUNCTION
********* QUERY **********
DROP FUNCTION IF EXISTS portfolio_value();
**************************

DROP FUNCTION
********* QUERY **********
create table my_stocks (
  symbol        varchar(20) not null,
  n_shares      integer not null,
  date_acquired date not null
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN ;
**************************

COPY 5
********* QUERY **********
create table stock_price as
  select symbol,current_date as quote_date,
         31.415 as price from my_stocks ;
**************************

SELECT 5
********* QUERY **********
insert into newly_acquired_stocks
       select * from my_stocks
       where date_acquired > '2017-05-15'::date;
**************************

********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks cross join stock_price
 where my_stocks.symbol = stock_price.symbol ;
**************************

 symbol | number_of_shares | price_per_share | current_value 
--------+------------------+-----------------+---------------
 MSFT   |              500 |          31.415 |     15707.500
 INTU   |              480 |          31.415 |     15079.200
 CRM    |              450 |          31.415 |     14136.750
 SHOP   |              100 |          31.415 |      3141.500
 NFLX   |               98 |          31.415 |      3078.670
(5 rows)

********* QUERY **********
insert into my_stocks (symbol,n_shares,date_acquired)
        values('FLIPKART','390','2017-10-15');
**************************

INSERT 0 1
********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks full outer join stock_price
 on my_stocks.symbol = stock_price.symbol ;
**************************

  symbol  | number_of_shares | price_per_share | current_value 
----------+------------------+-----------------+---------------
 MSFT     |              500 |          31.415 |     15707.500
 INTU     |              480 |          31.415 |     15079.200
 CRM      |              450 |          31.415 |     14136.750
 SHOP     |              100 |          31.415 |      3141.500
 NFLX     |               98 |          31.415 |      3078.670
 FLIPKART |              390 |                 |              
(6 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION valuing_stock(varchar(20)) RETURNS integer AS $$
DECLARE
  symbol ALIAS FOR $1;
  price integer := 0;
BEGIN
  FOR i IN 1 .. LENGTH(symbol) LOOP
    price = price + ASCII(SUBSTRING (symbol, i, 1));
  END LOOP;
  RETURN price;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_price
SET    price = updated_stock.new_price
FROM   (select symbol, valuing_stock(symbol) as new_price from my_stocks) as updated_stock
WHERE  updated_stock.symbol = stock_price.symbol;
**************************

UPDATE 5
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_per_share, price
from my_stocks CROSS JOIN stock_price
where my_stocks.symbol = stock_price.symbol;
**************************

 symbol | n_shares | price_per_share | price 
--------+----------+-----------------+-------
 MSFT   |      500 |             314 |   314
 INTU   |      480 |             320 |   320
 CRM    |      450 |             226 |   226
 SHOP   |      100 |             378 |   378
 NFLX   |       98 |             312 |   312
(5 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value() RETURNS bigint AS $$
DECLARE
  stocks_cursor CURSOR FOR select *
       from my_stocks CROSS JOIN stock_price
       where my_stocks.symbol = stock_price.symbol;
  row  RECORD;
  aggregate_value bigint := 0;
BEGIN
  OPEN stocks_cursor;
  LOOP
    FETCH FROM stocks_cursor INTO row;
    EXIT WHEN NOT FOUND;
    aggregate_value = aggregate_value + (row.n_shares * row.price);
  END LOOP;
  return aggregate_value;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
select portfolio_value();
**************************

 portfolio_value 
-----------------
          480676
(1 row)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired)
  select my_stocks.symbol, n_shares, NOW() from my_stocks FULL OUTER JOIN stock_price
  ON my_stocks.symbol = stock_price.symbol
  where price > (select avg(price) from stock_price);
**************************

INSERT 0 4
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_of_each_share, price*n_shares as current_value, date_acquired, quote_date
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol;
**************************

  symbol  | n_shares | price_of_each_share | current_value | date_acquired | quote_date 
----------+----------+---------------------+---------------+---------------+------------
 MSFT     |      500 |                 314 |        157000 | 2016-12-21    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2017-04-06    | 2018-09-14
 CRM      |      450 |                 226 |        101700 | 2017-07-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2016-02-26    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2017-09-13    | 2018-09-14
 FLIPKART |      390 |                     |               | 2017-10-15    | 
 MSFT     |      500 |                 314 |        157000 | 2018-09-14    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2018-09-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2018-09-14    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2018-09-14    | 2018-09-14
(10 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price;
**************************

  symbol  | total_n_shares | total_value_held 
----------+----------------+------------------
 NFLX     |            196 |            61152
 INTU     |            960 |           307200
 CRM      |            450 |           101700
 FLIPKART |            390 |                 
 MSFT     |           1000 |           314000
 SHOP     |            200 |            75600
(6 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price
having count(date_acquired) > 1;
**************************

 symbol | total_n_shares | total_value_held 
--------+----------------+------------------
 NFLX   |            196 |            61152
 INTU   |            960 |           307200
 MSFT   |           1000 |           314000
 SHOP   |            200 |            75600
(4 rows)

********* QUERY **********
DROP TABLE IF EXISTS my_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS stock_price;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS newly_acquired_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP FUNCTION IF EXISTS valuing_stock();
**************************

DROP FUNCTION
********* QUERY **********
DROP FUNCTION IF EXISTS portfolio_value();
**************************

DROP FUNCTION
********* QUERY **********
create table my_stocks (
  symbol        varchar(20) not null,
  n_shares      integer not null,
  date_acquired date not null
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN ;
**************************

COPY 5
********* QUERY **********
create table stock_price as
  select symbol,current_date as quote_date,
         31.415 as price from my_stocks ;
**************************

SELECT 5
********* QUERY **********
insert into newly_acquired_stocks
       select * from my_stocks
       where date_acquired > '2017-05-15'::date;
**************************

********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks cross join stock_price
 where my_stocks.symbol = stock_price.symbol ;
**************************

 symbol | number_of_shares | price_per_share | current_value 
--------+------------------+-----------------+---------------
 MSFT   |              500 |          31.415 |     15707.500
 INTU   |              480 |          31.415 |     15079.200
 CRM    |              450 |          31.415 |     14136.750
 SHOP   |              100 |          31.415 |      3141.500
 NFLX   |               98 |          31.415 |      3078.670
(5 rows)

********* QUERY **********
insert into my_stocks (symbol,n_shares,date_acquired)
        values('FLIPKART','390','2017-10-15');
**************************

INSERT 0 1
********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks full outer join stock_price
 on my_stocks.symbol = stock_price.symbol ;
**************************

  symbol  | number_of_shares | price_per_share | current_value 
----------+------------------+-----------------+---------------
 MSFT     |              500 |          31.415 |     15707.500
 INTU     |              480 |          31.415 |     15079.200
 CRM      |              450 |          31.415 |     14136.750
 SHOP     |              100 |          31.415 |      3141.500
 NFLX     |               98 |          31.415 |      3078.670
 FLIPKART |              390 |                 |              
(6 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION valuing_stock(varchar(20)) RETURNS integer AS $$
DECLARE
  symbol ALIAS FOR $1;
  price integer := 0;
BEGIN
  FOR i IN 1 .. LENGTH(symbol) LOOP
    price = price + ASCII(SUBSTRING (symbol, i, 1));
  END LOOP;
  RETURN price;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_price
SET    price = updated_stock.new_price
FROM   (select symbol, valuing_stock(symbol) as new_price from my_stocks) as updated_stock
WHERE  updated_stock.symbol = stock_price.symbol;
**************************

UPDATE 5
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_per_share, price
from my_stocks CROSS JOIN stock_price
where my_stocks.symbol = stock_price.symbol;
**************************

 symbol | n_shares | price_per_share | price 
--------+----------+-----------------+-------
 MSFT   |      500 |             314 |   314
 INTU   |      480 |             320 |   320
 CRM    |      450 |             226 |   226
 SHOP   |      100 |             378 |   378
 NFLX   |       98 |             312 |   312
(5 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value() RETURNS bigint AS $$
DECLARE
  stocks_cursor CURSOR FOR select *
       from my_stocks CROSS JOIN stock_price
       where my_stocks.symbol = stock_price.symbol;
  row  RECORD;
  aggregate_value bigint := 0;
BEGIN
  OPEN stocks_cursor;
  LOOP
    FETCH FROM stocks_cursor INTO row;
    EXIT WHEN NOT FOUND;
    aggregate_value = aggregate_value + (row.n_shares * row.price);
  END LOOP;
  return aggregate_value;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
select portfolio_value();
**************************

 portfolio_value 
-----------------
          480676
(1 row)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired)
  select my_stocks.symbol, n_shares, NOW() from my_stocks FULL OUTER JOIN stock_price
  ON my_stocks.symbol = stock_price.symbol
  where price > (select avg(price) from stock_price);
**************************

INSERT 0 4
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_of_each_share, price*n_shares as current_value, date_acquired, quote_date
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol;
**************************

  symbol  | n_shares | price_of_each_share | current_value | date_acquired | quote_date 
----------+----------+---------------------+---------------+---------------+------------
 MSFT     |      500 |                 314 |        157000 | 2016-12-21    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2017-04-06    | 2018-09-14
 CRM      |      450 |                 226 |        101700 | 2017-07-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2016-02-26    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2017-09-13    | 2018-09-14
 FLIPKART |      390 |                     |               | 2017-10-15    | 
 MSFT     |      500 |                 314 |        157000 | 2018-09-14    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2018-09-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2018-09-14    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2018-09-14    | 2018-09-14
(10 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price;
**************************

  symbol  | total_n_shares | total_value_held 
----------+----------------+------------------
 NFLX     |            196 |            61152
 INTU     |            960 |           307200
 CRM      |            450 |           101700
 FLIPKART |            390 |                 
 MSFT     |           1000 |           314000
 SHOP     |            200 |            75600
(6 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price
having count(date_acquired) > 1;
**************************

 symbol | total_n_shares | total_value_held 
--------+----------------+------------------
 NFLX   |            196 |            61152
 INTU   |            960 |           307200
 MSFT   |           1000 |           314000
 SHOP   |            200 |            75600
(4 rows)

********* QUERY **********
DROP TABLE IF EXISTS my_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS stock_price;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS newly_acquired_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP FUNCTION IF EXISTS valuing_stock();
**************************

DROP FUNCTION
********* QUERY **********
DROP FUNCTION IF EXISTS portfolio_value();
**************************

DROP FUNCTION
********* QUERY **********
create table my_stocks (
  symbol        varchar(20) not null,
  n_shares      integer not null,
  date_acquired date not null
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN ;
**************************

COPY 5
********* QUERY **********
create table stock_price as
  select symbol,current_date as quote_date,
         31.415 as price from my_stocks ;
**************************

SELECT 5
********* QUERY **********
insert into newly_acquired_stocks
       select * from my_stocks
       where date_acquired > '2017-05-15'::date;
**************************

********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks cross join stock_price
 where my_stocks.symbol = stock_price.symbol ;
**************************

 symbol | number_of_shares | price_per_share | current_value 
--------+------------------+-----------------+---------------
 MSFT   |              500 |          31.415 |     15707.500
 INTU   |              480 |          31.415 |     15079.200
 CRM    |              450 |          31.415 |     14136.750
 SHOP   |              100 |          31.415 |      3141.500
 NFLX   |               98 |          31.415 |      3078.670
(5 rows)

********* QUERY **********
insert into my_stocks (symbol,n_shares,date_acquired)
        values('FLIPKART','390','2017-10-15');
**************************

INSERT 0 1
********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks full outer join stock_price
 on my_stocks.symbol = stock_price.symbol ;
**************************

  symbol  | number_of_shares | price_per_share | current_value 
----------+------------------+-----------------+---------------
 MSFT     |              500 |          31.415 |     15707.500
 INTU     |              480 |          31.415 |     15079.200
 CRM      |              450 |          31.415 |     14136.750
 SHOP     |              100 |          31.415 |      3141.500
 NFLX     |               98 |          31.415 |      3078.670
 FLIPKART |              390 |                 |              
(6 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION valuing_stock(varchar(20)) RETURNS integer AS $$
DECLARE
  symbol ALIAS FOR $1;
  price integer := 0;
BEGIN
  FOR i IN 1 .. LENGTH(symbol) LOOP
    price = price + ASCII(SUBSTRING (symbol, i, 1));
  END LOOP;
  RETURN price;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_price
SET    price = updated_stock.new_price
FROM   (select symbol, valuing_stock(symbol) as new_price from my_stocks) as updated_stock
WHERE  updated_stock.symbol = stock_price.symbol;
**************************

UPDATE 5
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_per_share, price
from my_stocks CROSS JOIN stock_price
where my_stocks.symbol = stock_price.symbol;
**************************

 symbol | n_shares | price_per_share | price 
--------+----------+-----------------+-------
 MSFT   |      500 |             314 |   314
 INTU   |      480 |             320 |   320
 CRM    |      450 |             226 |   226
 SHOP   |      100 |             378 |   378
 NFLX   |       98 |             312 |   312
(5 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value() RETURNS bigint AS $$
DECLARE
  stocks_cursor CURSOR FOR select *
       from my_stocks CROSS JOIN stock_price
       where my_stocks.symbol = stock_price.symbol;
  row  RECORD;
  aggregate_value bigint := 0;
BEGIN
  OPEN stocks_cursor;
  LOOP
    FETCH FROM stocks_cursor INTO row;
    EXIT WHEN NOT FOUND;
    aggregate_value = aggregate_value + (row.n_shares * row.price);
  END LOOP;
  return aggregate_value;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
select portfolio_value();
**************************

 portfolio_value 
-----------------
          480676
(1 row)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired)
  select my_stocks.symbol, n_shares, NOW() from my_stocks FULL OUTER JOIN stock_price
  ON my_stocks.symbol = stock_price.symbol
  where price > (select avg(price) from stock_price);
**************************

INSERT 0 4
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_of_each_share, price*n_shares as current_value, date_acquired, quote_date
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol;
**************************

  symbol  | n_shares | price_of_each_share | current_value | date_acquired | quote_date 
----------+----------+---------------------+---------------+---------------+------------
 MSFT     |      500 |                 314 |        157000 | 2016-12-21    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2017-04-06    | 2018-09-14
 CRM      |      450 |                 226 |        101700 | 2017-07-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2016-02-26    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2017-09-13    | 2018-09-14
 FLIPKART |      390 |                     |               | 2017-10-15    | 
 MSFT     |      500 |                 314 |        157000 | 2018-09-14    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2018-09-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2018-09-14    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2018-09-14    | 2018-09-14
(10 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price;
**************************

  symbol  | total_n_shares | total_value_held 
----------+----------------+------------------
 NFLX     |            196 |            61152
 INTU     |            960 |           307200
 CRM      |            450 |           101700
 FLIPKART |            390 |                 
 MSFT     |           1000 |           314000
 SHOP     |            200 |            75600
(6 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price
having count(date_acquired) > 1;
**************************

 symbol | total_n_shares | total_value_held 
--------+----------------+------------------
 NFLX   |            196 |            61152
 INTU   |            960 |           307200
 MSFT   |           1000 |           314000
 SHOP   |            200 |            75600
(4 rows)

********* QUERY **********
DROP TABLE IF EXISTS my_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS stock_price;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE IF EXISTS newly_acquired_stocks;
**************************

DROP TABLE
********* QUERY **********
DROP FUNCTION IF EXISTS valuing_stock();
**************************

DROP FUNCTION
********* QUERY **********
DROP FUNCTION IF EXISTS portfolio_value();
**************************

DROP FUNCTION
********* QUERY **********
create table my_stocks (
  symbol        varchar(20) not null,
  n_shares      integer not null,
  date_acquired date not null
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN ;
**************************

COPY 5
********* QUERY **********
create table stock_price as
  select symbol,current_date as quote_date,
         31.415 as price from my_stocks ;
**************************

SELECT 5
********* QUERY **********
insert into newly_acquired_stocks
       select * from my_stocks
       where date_acquired > '2017-05-15'::date;
**************************

********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks cross join stock_price
 where my_stocks.symbol = stock_price.symbol ;
**************************

 symbol | number_of_shares | price_per_share | current_value 
--------+------------------+-----------------+---------------
 MSFT   |              500 |          31.415 |     15707.500
 INTU   |              480 |          31.415 |     15079.200
 CRM    |              450 |          31.415 |     14136.750
 SHOP   |              100 |          31.415 |      3141.500
 NFLX   |               98 |          31.415 |      3078.670
(5 rows)

********* QUERY **********
insert into my_stocks (symbol,n_shares,date_acquired)
        values('FLIPKART','390','2017-10-15');
**************************

INSERT 0 1
********* QUERY **********
select my_stocks.symbol,n_shares as number_of_shares, price as price_per_share,price*n_shares as current_value
 from my_stocks full outer join stock_price
 on my_stocks.symbol = stock_price.symbol ;
**************************

  symbol  | number_of_shares | price_per_share | current_value 
----------+------------------+-----------------+---------------
 MSFT     |              500 |          31.415 |     15707.500
 INTU     |              480 |          31.415 |     15079.200
 CRM      |              450 |          31.415 |     14136.750
 SHOP     |              100 |          31.415 |      3141.500
 NFLX     |               98 |          31.415 |      3078.670
 FLIPKART |              390 |                 |              
(6 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION valuing_stock(varchar(20)) RETURNS integer AS $$
DECLARE
  symbol ALIAS FOR $1;
  price integer := 0;
BEGIN
  FOR i IN 1 .. LENGTH(symbol) LOOP
    price = price + ASCII(SUBSTRING (symbol, i, 1));
  END LOOP;
  RETURN price;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_price
SET    price = updated_stock.new_price
FROM   (select symbol, valuing_stock(symbol) as new_price from my_stocks) as updated_stock
WHERE  updated_stock.symbol = stock_price.symbol;
**************************

UPDATE 5
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_per_share, price
from my_stocks CROSS JOIN stock_price
where my_stocks.symbol = stock_price.symbol;
**************************

 symbol | n_shares | price_per_share | price 
--------+----------+-----------------+-------
 MSFT   |      500 |             314 |   314
 INTU   |      480 |             320 |   320
 CRM    |      450 |             226 |   226
 SHOP   |      100 |             378 |   378
 NFLX   |       98 |             312 |   312
(5 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value() RETURNS bigint AS $$
DECLARE
  stocks_cursor CURSOR FOR select *
       from my_stocks CROSS JOIN stock_price
       where my_stocks.symbol = stock_price.symbol;
  row  RECORD;
  aggregate_value bigint := 0;
BEGIN
  OPEN stocks_cursor;
  LOOP
    FETCH FROM stocks_cursor INTO row;
    EXIT WHEN NOT FOUND;
    aggregate_value = aggregate_value + (row.n_shares * row.price);
  END LOOP;
  return aggregate_value;
END; $$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
select portfolio_value();
**************************

 portfolio_value 
-----------------
          480676
(1 row)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired)
  select my_stocks.symbol, n_shares, NOW() from my_stocks FULL OUTER JOIN stock_price
  ON my_stocks.symbol = stock_price.symbol
  where price > (select avg(price) from stock_price);
**************************

INSERT 0 4
********* QUERY **********
select my_stocks.symbol, n_shares, price as price_of_each_share, price*n_shares as current_value, date_acquired, quote_date
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol;
**************************

  symbol  | n_shares | price_of_each_share | current_value | date_acquired | quote_date 
----------+----------+---------------------+---------------+---------------+------------
 MSFT     |      500 |                 314 |        157000 | 2016-12-21    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2017-04-06    | 2018-09-14
 CRM      |      450 |                 226 |        101700 | 2017-07-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2016-02-26    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2017-09-13    | 2018-09-14
 FLIPKART |      390 |                     |               | 2017-10-15    | 
 MSFT     |      500 |                 314 |        157000 | 2018-09-14    | 2018-09-14
 INTU     |      480 |                 320 |        153600 | 2018-09-14    | 2018-09-14
 SHOP     |      100 |                 378 |         37800 | 2018-09-14    | 2018-09-14
 NFLX     |       98 |                 312 |         30576 | 2018-09-14    | 2018-09-14
(10 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price;
**************************

  symbol  | total_n_shares | total_value_held 
----------+----------------+------------------
 NFLX     |            196 |            61152
 INTU     |            960 |           307200
 CRM      |            450 |           101700
 FLIPKART |            390 |                 
 MSFT     |           1000 |           314000
 SHOP     |            200 |            75600
(6 rows)

********* QUERY **********
select my_stocks.symbol, sum(n_shares) as total_n_shares, (price * sum(n_shares)) as total_value_held
from my_stocks FULL OUTER JOIN stock_price
ON my_stocks.symbol = stock_price.symbol
group by my_stocks.symbol, price
having count(date_acquired) > 1;
**************************

 symbol | total_n_shares | total_value_held 
--------+----------------+------------------
 NFLX   |            196 |            61152
 INTU   |            960 |           307200
 MSFT   |           1000 |           314000
 SHOP   |            200 |            75600
(4 rows)

